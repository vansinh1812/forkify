{"id":"node_modules/core-js/internals/to-integer-or-infinity.js","dependencies":[{"name":"/home/sinhnguyen/Documents/javascript/complete-javascript-course-master/18-forkify/starter/package.json","includedInParent":true,"mtime":1687858750300},{"name":"/home/sinhnguyen/Documents/javascript/complete-javascript-course-master/18-forkify/starter/node_modules/core-js/package.json","includedInParent":true,"mtime":1687765006110},{"name":"../internals/math-trunc","loc":{"line":1,"column":20,"index":20},"parent":"/home/sinhnguyen/Documents/javascript/complete-javascript-course-master/18-forkify/starter/node_modules/core-js/internals/to-integer-or-infinity.js","resolved":"/home/sinhnguyen/Documents/javascript/complete-javascript-course-master/18-forkify/starter/node_modules/core-js/internals/math-trunc.js"}],"generated":{"js":"var trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/core-js/internals/to-integer-or-infinity.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}}],"sources":{"node_modules/core-js/internals/to-integer-or-infinity.js":"var trunc = require('../internals/math-trunc');\n\n// `ToIntegerOrInfinity` abstract operation\n// https://tc39.es/ecma262/#sec-tointegerorinfinity\nmodule.exports = function (argument) {\n  var number = +argument;\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return number !== number || number === 0 ? 0 : trunc(number);\n};\n"},"lineCount":10}},"error":null,"hash":"8e2fa9ad26e9ece51b7acfbbc06b7d4c","cacheData":{"env":{}}}